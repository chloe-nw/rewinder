import os
from flask import render_template, jsonify, request
import MySQLdb
from app import app
import folium
import extrabr as br
from pandas import *
from geojson import LineString
from geojson import MultiPoint
import grasp
import json
global Dsort
Dsort=[]
global count
count=0


#db = MySQLdb.connect(user="root", host="localhost", passwd="encycsql",port=3306, db="world_inn")

@app.route("/")
def hello():
    print "hi!"
    return render_template('indext.html') 
# 
# @app.route("/jquery")
# def index_jquery():
#     return render_template('index_js.html') 
# 
# @app.route("/db")
# def cities_page():
#     db.query("SELECT Name FROM city;")
# 
#     query_results = db.store_result().fetch_row(maxrows=0)
#     cities = ""
#     for result in query_results:
#         cities += unicode(result[0], 'utf8')
#         cities += "<br>"
#     return cities
# 
# @app.route("/db_fancy")
# def cities_page_fancy():
#     db.query("SELECT Name, CountryCode, Population FROM city ORDER BY Population;")
# 
#     query_results = db.store_result().fetch_row(maxrows=0)
#     cities = []
#     for result in query_results:
#         cities.append(dict(name=unicode(result[0], 'utf8'), country=result[1], population=result[2]))
#     return render_template('cities.html', cities=cities) 
# 
# 
# @app.route("/db_json")
# def cities_json():
#     db.query("SELECT Name, CountryCode, Population FROM city;")
# 
#     query_results = db.store_result().fetch_row(maxrows=0)
#     cities = []
#     for result in query_results:
#         cities.append(dict(City=unicode(result[0], 'utf8'), CountryCode=result[1], Population=result[2]))
#     return jsonify(dict(cities=cities))

# @app.route('/<pagename>') 
# def regularpage(pagename=None): 
#     """ 
#     Route not found by the other routes above. May point to a static template. 
#     """ 
#     return "You've arrived at " + pagename
#     db.query("SELECT Name, CountryCode, Population FROM city ORDER BY Population;")
#     query_results = db.store_result().fetch_row(maxrows=0)
#     return query_results
#     #if pagename==None: 
#     #    raise Exception, 'page_not_found' 
#     #return render_template(pagename) 

@app.route("/broute",methods=['GET'])
def routeit():
    user_location = request.args.get('address')
    din = float(request.args.get('miles'))
    start=br.geocode(user_location)
    global dtot
    dtot=din
    global count
    count=count+1
    global star
    star=start
    optroute,d,s,coords,narrative,stops,delt,pathsout,Dsorted,Nsorted,points=br.getOpt(user_location,din)
    print len(Dsorted)
    print Nsorted
    global Dsort
    Dsort=Dsorted 
    global Nsort
    Nsort=Nsorted
    global posspaths
    posspaths=pathsout
    global pnts
    pnts=points
    m = folium.Map(location=coords[0],zoom_start=13,tiles='Mapbox',API_key='cmm34.jdomfk86')
    m.line(coords, line_color='#2DD0AF', line_weight=5)
    j=-1
    n=-1-delt
    #print delt
    # for coor in optroute[:n]:
#         j=j+1
#         m.simple_marker(coor,popup=stops[j])
    m.create_map(path='app/templates/osm.html')
    #print d
   # print len(optroute)
    stops=narrative
    return render_template('route.html',dist=d,numseen=len(optroute),narrative=narrative,stops=stops)
@app.route("/makemap")
def makemap():
    return render_template('osm.html')

@app.route("/newroute")
def newroute():
#     global Dsort
#     Dsorted=Dsort
#     global Nsort
#     Nsorted=Nsort
#     global posspaths
#     pathsin=posspaths
#     global pnts
#     points=pnts
#     global start
#     star=start
    global Dsort,Nsort,points,count,star,posspaths,dtot
    #route,d,s,coords,narrative,delt=newRoute(pathsin,Dsorted,Nsorted,points,n,star)
    route,d,s,coords,narrative,delt,stops=br.newRoute(posspaths,Dsort,Nsort,pnts,count,star,dtot)
    global count
    count=count+1
    m = folium.Map(location=coords[0],zoom_start=13,tiles='Mapbox',API_key='cmm34.jdomfk86')
    m.line(coords, line_color='#2DD0AF', line_weight=5)
    j=-1
    n=-1-delt
    #print delt
    for coor in route[:n]:
        j=j+1
        m.simple_marker(coor,popup=stops[j])
    m.create_map(path='app/templates/osm.html')
    #print d
   # print len(optroute)
    return render_template('route.html',dist=d,numseen=len(route),narrative=narrative,stops=stops)
    
@app.route("/slides")
def slide():
    return render_template('slides.html')